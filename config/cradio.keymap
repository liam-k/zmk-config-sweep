/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keymap_german.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <80>;
            key-positions = <22 23>;
            bindings = <&kp ESC>;
            require-prior-idle-ms = <125>;
        };

        combo_up {
            timeout-ms = <80>;
            key-positions = <7 8>;
            bindings = <&kp UP>;
            require-prior-idle-ms = <125>;
        };

        page_up {
            timeout-ms = <80>;
            key-positions = <6 7 8>;
            bindings = <&kp PAGE_UP>;
            require-prior-idle-ms = <125>;
        };

        combo_down {
            timeout-ms = <80>;
            key-positions = <27 28>;
            bindings = <&kp DOWN>;
            require-prior-idle-ms = <125>;
        };

        page_down {
            timeout-ms = <80>;
            key-positions = <26 27 28>;
            bindings = <&kp PAGE_DOWN>;
            require-prior-idle-ms = <125>;
        };


        combo_left {
	        timeout-ms = <80>;
	        key-positions = <16 17>;
	        bindings = <&kp LEFT>;
			require-prior-idle-ms = <125>;

	    };

        combo_right {
	        timeout-ms = <80>;
	        key-positions = <17 18>;
	        bindings = <&kp RIGHT>;
			require-prior-idle-ms = <125>;

	    };

        combo_enter {
            timeout-ms = <80>;
            key-positions = <26 27>;
            bindings = <&kp RET>;
            require-prior-idle-ms = <125>;

        };

        combo_bt_sys {
            timeout-ms = <200>;
            key-positions = <31 32>;
            bindings = <&mo 5>;
            require-prior-idle-ms = <125>;

        };

        combo_fn_layer {
	        timeout-ms = <80>;
	        key-positions = <3 4>;
	        bindings = <&mo 4>;
			require-prior-idle-ms = <125>;

        };

        combo_gaming {
            timeout-ms = <200>;
            require-prior-idle-ms = <250>;
            key-positions = <24 25>;
            bindings = <&tog 3>;
            layers = <1 3>;
        };

        combo_default {
            timeout-ms = <200>;
            require-prior-idle-ms = <250>;
            key-positions = <0 9>;
            bindings = <&to 1>;
        };

        combo_backspace {
            timeout-ms = <80>;
            key-positions = <8 9>;
            bindings = <&kp BACKSPACE>;
            require-prior-idle-ms = <125>;
        };

        combo_backspace_hr {
            timeout-ms = <80>;
            key-positions = <18 19>;
            bindings = <&kp BACKSPACE>;
            require-prior-idle-ms = <125>;

        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp TAB>;
            require-prior-idle-ms = <125>;
        };

        combo_copy {
            timeout-ms = <80>;
            key-positions = <11 2>;
            bindings = <&kp LG(C)>;
            require-prior-idle-ms = <125>;

        };

        combo_paste {
            timeout-ms = <80>;
            key-positions = <13 2>;
            bindings = <&kp LG(V)>;
            require-prior-idle-ms = <125>;

        };

        combo_undo {
            timeout-ms = <60>;
            key-positions = <1 2>;
            bindings = <&kp LG(DE_Z)>;
            require-prior-idle-ms = <125>;

        };

        combo_redo {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp LG(LS(DE_Z))>;
            require-prior-idle-ms = <125>;

        };

        combo_del {
            timeout-ms = <80>;
            key-positions = <28 29>;
            bindings = <&kp DEL>;
            require-prior-idle-ms = <125>;

        };

        combo_euro {
            timeout-ms = <80>;
            key-positions = <20 21>;
            bindings = <&kp DE_EURO>;
            require-prior-idle-ms = <125>;

        };

};

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick_tap_ms = <150>;
            require-prior-idle-ms = <160>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hs: homerow_shifts {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFTS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        hsl: homerow_shifts_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFTS_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&to>;
        };

        hthl: homerow_tap_hold_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_TAP_HOLD_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&to>, <&to>;
        };

        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <150>;
            quick_tap_ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        blt: layertap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYERTAP";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&to>, <&kp>;
        };

        mlt: mom_layertap {
            compatible = "zmk,behavior-hold-tap";
            label = "MOMENT_LAYER_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;
        };

        mo_to: behavior_mo_to {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <150>;
            bindings = <&mo>, <&to>;
        };


        sk: sticky_key {
            release-after-ms = <500>;  // release after 0.5s
            quick-release;             // no double capitalization when rolling keys
        };

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&td DE_BSLH K    	&td DE_UNDS DE_DOT        	&td DE_LBKT O        	&td DE_RBKT DE_COMM    	&td DE_CARET DE_UDIA   				&td DE_EXCL V 				&td MAC_LABK G    	&td MAC_RABK C     &td DE_EQL L            &td DE_AMPS DE_Z
&td DE_FSLH H		&hm LEFT_CONTROL A  		&hm LALT E   			&hm LGUI I  			&td DE_STAR DE_Y     	  	 		&td DE_QUES B 	 			&hm RGUI T	  		&hm RALT R  		&hm RIGHT_CONTROL N  	&td DE_AT F
&td DE_HASH X  		&td DE_DLR Q               	&td MAC_PIPE DE_ADIA   	&td DE_TILD U  	 		&td DE_GRV DE_ODIA  				&td DE_PLUS P 		 		&td DE_PERC D       &td DE_DQT W       &td DE_SQT M             &td DE_SEMI J
                                        								&mlt 2 SPACE    		&sk LEFT_SHIFT   	 				&mo_to 2 1 					&td DE_SS S
              >;
          };

        symbol_layer {
            bindings = <
&td ESCAPE DE_BSLH  &kp DE_UNDS          		&kp DE_LBKT       &kp DE_RBKT       &kp DE_CARET         &kp DE_EXCL      &kp MAC_LABK      &kp MAC_RABK      &kp DE_EQL        &kp DE_AMPS
&kp TAB             &hm LEFT_CONTROL DE_FSLH	&hm LALT DE_LBRC  &hm LGUI DE_RBRC  &kp DE_STAR  		 &kp DE_QUES  	  &hm RGUI DE_LPAR  &hm RALT DE_RPAR  &hm RIGHT_CONTROL DE_MINS  &hm DE_AT DE_COLN
&kp DE_HASH  		&hm DE_DLR DE_EURO    		&kp MAC_PIPE       &kp DE_TILD       &kp DE_GRV      	 &kp DE_PLUS 	  &kp DE_PERC       &kp DE_DQT        &kp DE_SQT        &kp DE_SEMI
                                                        	 			&to 0       &kp BACKSPACE    	 &to 2      	 &to 0
            >;
        };

        num_nav_layer {

            bindings = <
&td C_PREV LG(LA(LEFT))  	&kp LA(LG(DOWN)) 		&kp  UP					&kp LA(LG(UP))     		&td C_NEXT LG(LA(RIGHT)) 	   	&hm HOME PAGE_UP  	&td DE_LPAR N7      &kp N8    		&td DE_RPAR N9     		 &kp BACKSPACE
&kp LA(LEFT)  				&hm DE_LBRC LEFT 		&kp DOWN      			&hm DE_RBRC RIGHT     	&kp LA(RIGHT)     				&hm END PAGE_DOWN   &hm RGUI N4  		&hm RALT N5  	&hm RIGHT_CONTROL N6     &kp DE_EQL
&kp LA(LS(LEFT))   			&kp LS(LEFT)    		&hm C_PP LA(LG(SPACE)) 	&kp LS(RIGHT) 	   		&kp LA(LS(RIGHT))        	 	&td DE_STAR DE_PLUS	&td DE_DOT N1  		&td N0 N2   	&td DE_COMM N3  		 &td DE_FSLH DE_MINS
												 							&to 0 					&hm F6 C_VOICE_COMMAND   		&to 0  		 		&kp N0
            >;
        };


gaming_qwertz {
    bindings = <
    // ╭──────────────────┬───────────┬───────────┬────────────┬────────────╮ ╭───────────┬─────────────┬─────────────┬────────────┬────────────╮
         &kp TAB    		 &kp Q       &kp W       &kp E        &kp R          &kp T     	&kp DE_Z       &kp U       &kp I      	&kp O
    // ├──────────────────┼───────────┼───────────┼────────────┼────────────┤ ├───────────┼─────────────┼─────────────┼────────────┼────────────┤
         &kp LEFT_SHIFT 	&kp A       &kp S       &kp D        &kp F          &kp N1      &kp N2        &kp N3        &kp N4       &kp N5
    // ├──────────────────┼───────────┼───────────┼────────────┼────────────┤ ├───────────┼─────────────┼─────────────┼────────────┼────────────┤
         &kp LEFT_CONTROL   &kp DE_Y       &kp X       &kp C        &kp V        &kp N6      &kp N7        &kp N8        &kp N9       &kp N0
    // ╰──────────────────┴───────────┴───────────┼────────────┼────────────┤ ├───────────┼─────────────┼─────────────┴────────────┴────────────╯
                                             &kp SPACE    &kp LEFT_GUI        &kp ESC      &kp ENTER
    //                                     ╰────────────┴────────────╯ ╰───────────┴─────────────╯
    >;
};

function_keys {
    bindings = <
         &trans    		&trans       &trans  	    &trans      &trans         	&trans  	 &kp F7       &kp F8        &kp F9      &kp F12
         &trans 		&trans       &trans     	&trans   	&trans        	&trans       &kp F4    	  &kp F5        &kp F6 	&kp F11
         &trans 		&trans 	     &trans     	&trans   	&trans    	 	&trans       &kp F1       &kp F2        &kp F3      &kp F10
                               	             &kp SPACE  &sk LEFT_SHIFT  &kp RIGHT_GUI  &kp RIGHT_ALT
    >;
};

        bt_sys {
            bindings = <
&kp C_BRIGHTNESS_DEC   &kp C_BRIGHTNESS_INC   	&trans 		&trans			&sys_reset      &sys_reset   &trans  &trans  &kp C_VOL_DN  &kp C_VOL_UP
&trans  			&bt BT_DISC 0 		&bt BT_DISC 1   &bt BT_DISC 2  		&bootloader     &bootloader  &trans  &trans  &trans  &kp C_MUTE
&bt BT_CLR      	&bt BT_SEL 0     	&bt BT_SEL 1	&bt BT_SEL 2  			&to 0        &to 1   &trans  &trans  &trans  &trans
                                    									 &to 0   &trans       &trans  &to 1
            >;
        };
    };
};
